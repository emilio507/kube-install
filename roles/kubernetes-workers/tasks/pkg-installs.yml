- name: install docker repo centos
  ansible.builtin.shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  when: ansible_facts['distribution'] == 'CentOS' and ansible_facts['distribution_version'] >= '7'
  become: true

- name: install docker repo Rocky
  #ansible.builtin.shell: dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
  ansible.builtin.shell: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 
  when: ansible_facts['distribution'] == 'Rocky' and ansible_facts['distribution_version'] >= '8'
  become: true

- name: check if kuberenetes repo installed
  ansible.builtin.shell: grep -r --include '*.list' '^deb ' /etc/apt/sources.list*
  register: repos_installed
  when: ansible_facts['os_family'] == 'Debian'

- name: Copy install script for kuberenetes repo on Ubuntu
  ansible.builtin.copy:
    src: install_kube_repo.sh
    dest: /tmp/install_kube_repo.sh
    mode: 0755
  when: ansible_facts['os_family'] == 'Debian' and 'docker' not in repos_installed.stdout 

- name: install kubernetes repo on Ubuntu
  ansible.builtin.shell: /tmp/install_kube_repo.sh
  when: ansible_facts['os_family'] == 'Debian' and 'docker' not in repos_installed.stdout
  become: true

- name: Yum clean to remove errors
  ansible.builtin.shell: yum clean all
  when: ansible_facts['distribution'] == 'CentOS' and ansible_facts['distribution_version'] >= '7'
  become: true

- name: dnf clean to remove errors
  ansible.builtin.shell: dnf clean all
  when: ansible_facts['distribution'] == 'Rocky' and ansible_facts['distribution_version'] >= '8'
  become: true

- name: install epel repo
  ansible.builtin.yum:
    name:
      - epel-release
  when: ansible_facts['distribution'] == 'CentOS' and ansible_facts['distribution_version'] >= '7'
  become: true

- name: install epel repo Rocky
  ansible.builtin.dnf:
    name:
      - epel-release
  when: ansible_facts['distribution'] == 'Rocky' and ansible_facts['distribution_version'] >= '8'
  become: true

- name: install base packages RedHat
  ansible.builtin.package:
    name:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
      - git
      - vim
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - chrony
      - python3
      - gnupg
      - lsb-release
  when: ansible_facts['os_family'] == 'RedHat' or ansible_facts['os_family'] == 'Rocky'
  become: true

- name: install packages Debian
  ansible.builtin.package:
    name:
      - apt-transport-https
      - apt-utils
      - lvm2
      - multipath-tools
      - multipath-tools-boot
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - git
      - vim
      - chrony
      - containerd
      - docker.io
      #- docker-ce-cli
      #- containerd.io
      - python3
      - apt-transport-https
      - curl
      - kubeadm
      - kubelet
      - kubectl
      - kubernetes-cni
      - ipvsadm
      - bash-completion
    state: present
  when: ansible_facts['os_family'] == 'Debian' #or ansible_distribution == 'Ubuntu'
  become: true

- name: create system user centos Debian
  user:
    name: centos
    groups: sudo,docker
    shell: /bin/bash
    append: true
  become: true
  when: ansible_facts['os_family'] == 'Debian'

- name: Create modules load file
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter
  become: true

- name: K8s sysctl config
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      net.ipv4.conf.all.route_localnet=1
  become: true
  notify: restart sysctl

- name: Check if containerd config is set
  ansible.builtin.stat:
    path: /etc/containerd/config.toml
  register: containerd_config
  become: true

- name: Create containerd config directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'
  become: true
  when: containerd_config.stat.exists == False

- name: Set default config for containerd
  ansible.builtin.shell: containerd config default > /etc/containerd/config.toml
  become: true
  when: ansible_facts['os_family'] == 'Debian' and containerd_config.stat.exists == False

- name: Ensure cgroup settings set for containerd
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^.*SystemdCgroup = false.*$'
    line: 'SystemdCgroup = true'
    create: true
  become: true
  notify: restart containerd
  when: containerd_config.stat.exists == False

- name: enabled services Debian
  systemd:
    state: started
    enabled: true
    name: "{{ item }}"
  become: true
  loop:
    - chrony
    - containerd
    - ufw
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Ubuntu'

- name: install kuberenetes
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - kubeadm={{ kube_version }}-00
    - kubelet={{ kube_version }}-00
    - kubectl={{ kube_version }}-00
    - kubernetes-cni
  become: true
  when: ansible_facts['os_family'] == 'Debian'

- name: enabled & start kube services
  systemd:
    state: started
    enabled: true
    name: "{{ item }}"
  become: true
  loop:
    - kubelet
  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Ubuntu'

- meta: flush_handlers

- name: Pause for 30 seconds
  pause:
    seconds: 30
  become: true

#- name: Reboot nodes to apply changes
#  ansible.builtin.reboot:
#    reboot_timeout: 900
#    msg: "Reboot initiated by Ansible for updates"
#  when: ansible_facts['distribution'] == 'Debian' or ansible_facts['distribution'] == 'Ubuntu'
#  become: true
#  # async: 0
#  # poll: 0
#  # register: reboot

